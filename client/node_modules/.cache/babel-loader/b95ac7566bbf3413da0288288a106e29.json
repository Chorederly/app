{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/shanealan/v_school/level_5/chorderly/client/src/context/ChoreContext.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nconst ChoreContext = /*#__PURE__*/React.createContext(null);\n\nconst ChoreContextProvider = ({\n  children\n}) => {\n  _s();\n\n  const [chores, setChores] = useState([]);\n\n  const updateChores = () => {\n    axios.get(\"/chores\").then(resp => {\n      console.log(resp);\n      setChores(resp.data);\n    }).catch(err => console.log(err));\n  };\n\n  useEffect(() => {\n    updateChores;\n  }, []);\n\n  const assignChore = (choreId, userId) => {\n    axios.put(`/chores/updateOne/${choreId}`, {\n      user: userId,\n      available: false\n    }).then(resp => {\n      console.log(resp);\n      updateUsers();\n    }).catch(err => console.log(err));\n  };\n\n  const unAssignChore = choreId => {\n    axios.put(`chores/updateOne/${choreId}`, {\n      user: null,\n      completed: false\n    }).then(res => {\n      updateChores();\n    }).catch(err => console.log(err));\n  };\n\n  const resetChores = (weekly = true, monthly = true, asneeded = true) => {\n    axios.get(\"/resetAll\").then(res => {\n      chores = res.data;\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(ChoreContext.Provider, {\n    value: {\n      chores,\n      setChores,\n      assignChore\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChoreContextProvider, \"bHjTQKKpZSlu2bTYL0F/gZcfHtA=\");\n\n_c = ChoreContextProvider;\nexport { ChoreContext, ChoreContextProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"ChoreContextProvider\");","map":{"version":3,"sources":["/Users/shanealan/v_school/level_5/chorderly/client/src/context/ChoreContext.jsx"],"names":["React","useState","useEffect","axios","ChoreContext","createContext","ChoreContextProvider","children","chores","setChores","updateChores","get","then","resp","console","log","data","catch","err","assignChore","choreId","userId","put","user","available","updateUsers","unAssignChore","completed","res","resetChores","weekly","monthly","asneeded"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,YAAY,gBAAGJ,KAAK,CAACK,aAAN,CAAoB,IAApB,CAArB;;AAEA,MAAMC,oBAAoB,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAgB;AAAA;;AAC3C,QAAM,CAACC,MAAD,EACJC,SADI,IACSR,QAAQ,CAAC,EAAD,CADvB;;AAEA,QAAMS,YAAY,GAAG,MAAI;AACvBP,IAAAA,KAAK,CACFQ,GADH,CACO,SADP,EAEGC,IAFH,CAEQC,IAAI,IAAI;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACFJ,MAAAA,SAAS,CAACI,IAAI,CAACG,IAAN,CAAT;AACD,KALH,EAMGC,KANH,CAMSC,GAAG,IAAIJ,OAAO,CAACC,GAAR,CAAYG,GAAZ,CANhB;AAOD,GARD;;AASAhB,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,YAAY;AACb,GAFQ,EAEN,EAFM,CAAT;;AAGA,QAAMS,WAAW,GAAG,CAACC,OAAD,EAAUC,MAAV,KAAmB;AACnClB,IAAAA,KAAK,CAACmB,GAAN,CAAW,qBAAoBF,OAAQ,EAAvC,EAA0C;AAACG,MAAAA,IAAI,EAAEF,MAAP;AAAeG,MAAAA,SAAS,EAAE;AAA1B,KAA1C,EAA4EZ,IAA5E,CAAiFC,IAAI,IAAE;AACrFC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAY,MAAAA,WAAW;AACZ,KAHD,EAGGR,KAHH,CAGSC,GAAG,IAAEJ,OAAO,CAACC,GAAR,CAAYG,GAAZ,CAHd;AAIH,GALD;;AAOA,QAAMQ,aAAa,GAAIN,OAAD,IAAW;AAC/BjB,IAAAA,KAAK,CAACmB,GAAN,CAAW,oBAAmBF,OAAQ,EAAtC,EAAyC;AAACG,MAAAA,IAAI,EAAE,IAAP;AAAaI,MAAAA,SAAS,EAAE;AAAxB,KAAzC,EACCf,IADD,CACMgB,GAAG,IAAE;AACVlB,MAAAA,YAAY;AACZ,KAHD,EAGGO,KAHH,CAGSC,GAAG,IAAEJ,OAAO,CAACC,GAAR,CAAYG,GAAZ,CAHd;AAID,GALD;;AAOA,QAAMW,WAAW,GAAE,CAACC,MAAM,GAAC,IAAR,EAAcC,OAAO,GAAC,IAAtB,EAA4BC,QAAQ,GAAC,IAArC,KAA4C;AAC3D7B,IAAAA,KAAK,CAACQ,GAAN,CAAU,WAAV,EAAuBC,IAAvB,CAA6BgB,GAAD,IAAO;AACjCpB,MAAAA,MAAM,GAACoB,GAAG,CAACZ,IAAX;AAED,KAHD;AAIH,GALD;;AAOA,sBACE,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAC5BR,MAAAA,MAD4B;AAE5BC,MAAAA,SAF4B;AAG5BU,MAAAA;AAH4B,KAA9B;AAAA,cAKGZ;AALH;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CA7CD;;GAAMD,oB;;KAAAA,oB;AA+CN,SAAQF,YAAR,EAAsBE,oBAAtB","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport axios from 'axios'\n\nconst ChoreContext = React.createContext(null)\n\nconst ChoreContextProvider = ({children}) => {\n  const [chores,\n    setChores] = useState([])\n  const updateChores = ()=>{\n    axios\n      .get(\"/chores\")\n      .then(resp => {\n          console.log(resp)\n        setChores(resp.data)\n      })\n      .catch(err => console.log(err))\n  }\n  useEffect(() => {\n    updateChores\n  }, [])\n  const assignChore = (choreId, userId)=>{\n      axios.put(`/chores/updateOne/${choreId}`, {user: userId, available: false}).then(resp=>{\n        console.log(resp)\n        updateUsers()\n      }).catch(err=>console.log(err))\n  }\n\n  const unAssignChore = (choreId)=>{\n    axios.put(`chores/updateOne/${choreId}`, {user: null, completed: false})\n    .then(res=>{\n     updateChores()\n    }).catch(err=>console.log(err))\n  }\n\n  const resetChores= (weekly=true, monthly=true, asneeded=true)=>{\n      axios.get(\"/resetAll\").then((res)=>{\n        chores=res.data\n\n      })\n  }\n\n  return (\n    <ChoreContext.Provider value={{\n      chores,\n      setChores, \n      assignChore\n    }}>\n      {children}\n    </ChoreContext.Provider>\n  )\n}\n\nexport {ChoreContext, ChoreContextProvider}"]},"metadata":{},"sourceType":"module"}